generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model blogs {
  id                    BigInt                  @id @default(autoincrement())
  title                 String?
  content               String?
  url                   String?
  blogs_embedding_store blogs_embedding_store[]
}

model blogs_embedding_store {
  embedding_uuid String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id             BigInt
  chunk_seq      Int
  chunk          String
  embedding      Unsupported("vector")
  blogs          blogs                 @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id, chunk_seq])
}

model projects_new {
  id                           Int                            @id @default(autoincrement())
  title                        String
  description                  String
  tech_stack                   String[]
  contribution_needs           String[]
  tags                         String[]
  project_stage                String?
  github_repo_url              String?
  created_at                   DateTime?                      @default(now()) @db.Timestamp(6)
  updated_at                   DateTime?                      @default(now()) @db.Timestamp(6)
  user_id                      Int?
  contact_email                String?
  projects_new_embedding_store projects_new_embedding_store[]
}

model projects_new_embedding_store {
  embedding_uuid String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  id             Int
  chunk_seq      Int
  chunk          String
  embedding      Unsupported("vector")
  projects_new   projects_new          @relation(fields: [id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([id, chunk_seq])
}

model projects {
  id                 Int                    @id @default(autoincrement())
  title              String
  description        String
  tech_stack         String[]
  contribution_needs String[]
  tags               String[]
  project_stage      String?
  github_repo_url    String?
  created_at         DateTime?              @default(now()) @db.Timestamp(6)
  updated_at         DateTime?              @default(now()) @db.Timestamp(6)
  embedding          Unsupported("vector")?
  user_id            Int?
  contact_email      String?
}

model projects1 {
  id                 Int      @id @default(autoincrement())
  title              String?
  description        String?
  tech_stack         String[]
  contribution_needs String[]
  tags               String[]
  project_stage      String?
}

model replies {
  id         Int       @id @default(autoincrement())
  question   String
  answer     String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
}
